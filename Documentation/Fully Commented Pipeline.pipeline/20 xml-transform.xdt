<?xml version="1.0"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform" xmlns:deploy="http://github.com/kamsar/xdt-deploy">
	<!-- 
		This is an example of a config transform file implemented in Microsoft's XDT language
		(aka Web.config Transformations - see http://msdn.microsoft.com/en-us/library/dd465326.aspx for docs)
		
		You have to add the xmlns:deploy="http://github.com/kamsar/xdt-deploy" to the root element as we use
		an extended schema to allow us to define which file should be transformed directly within the XDT definition.
		
		All variables from PowerShell are also passed as XDT parameters. You can specify variables in two ways:
		{VariableName} (use value, error if not defined)
		{VariableName:DefaultValue} (use value or default if not defined)
		
		The transformation is executed using the XDT Transformation Tool, so documentation thereof is relevant.
		See http://ctt.codeplex.com/ for more info.
	-->
	
	<!-- 
		The deploy:TargetFile is a required element that defines what file to execute the transform on.
		The element body is a relative path from the root of the working directory (eg ..\deploy\$environmentname).
		Normally the working directory will contain a Website folder that has the web root in it; the below example
		would then cause this transform to execute on the root Web.config file.
	-->
	<deploy:TargetFile>Website\Web.config</deploy:TargetFile>
	
	<!-- you can specify multiple target files, as well as use wildcards in the target spec. At least one TargetFile is required, but there is no limit. -->
	<deploy:TargetFile>Website\App_Config\Include\*.config</deploy:TargetFile>
	
	<!-- this optional parameter (if present and false) will prevent a build error from occurring if the target of the transform does not exist (it will be skipped) -->
	<deploy:MissingFileError>false</deploy:MissingFileError>
	
	<!-- this optional parameter contains a PowerShell expression that should evaluate to true or false. If it evaluates to false, the transformation is skipped -->
	<deploy:Condition>$FooValue -eq $true</deploy:Condition>
	
	<!-- you can optionally control whether the transform attempts to preserve existing document formatting (default: true) -->
	<deploy:PreserveFormatting>false</deploy:PreserveFormatting>
	
	<!-- for the sake of demonstration, remove the configuration/connectionStrings element -->
	<connectionStrings xdt:Transform="Remove" />
	
	<appSettings>
		<!-- for the sake of demonstration, set the "Foo" appSetting to the $FooValue PS variable. If the variable does not exist, an empty string will replace it. -->
		<add key="Foo" xdt:Transform="SetAttributes(value)" xdt:Locator="Match(key)" value="{FooValue}" />
	</appSettings>
</configuration>